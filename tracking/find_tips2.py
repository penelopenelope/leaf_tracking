#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jan 26 00:01:25 2018

@author: siwen_chen
"""

import cv2
import numpy as np

#contour sample for test
#n =  ([(345, 357), (346, 358), (347, 359), (347, 389), (347, 390),
#       (348, 360), (348, 391), (349, 360), (349, 392), (349, 393),
#       (350, 361), (350, 394), (350, 395), (351, 361), (351, 396),
#       (352, 361), (352, 397), (352, 398), (353, 361), (353, 399),
#       (354, 361), (354, 400), (355, 361), (355, 401), (355, 402),
#       (356, 360), (356, 403), (357, 359), (357, 404), (357, 405),
#       (358, 358), (358, 406), (359, 357), (359, 407), (360, 357),
#       (360, 408), (360, 409), (361, 356), (361, 410), (362, 355),
#       (362, 411), (363, 355), (363, 412), (364, 355), (364, 413),
#       (365, 354), (365, 414), (366, 354), (366, 415), (367, 354),
#       (367, 415), (368, 354), (368, 416), (369, 354), (369, 416),
#       (370, 354), (370, 417), (371, 354), (371, 417), (372, 354),
#       (372, 417), (373, 354), (373, 418), (374, 354), (374, 418),
#       (375, 354), (375, 419), (376, 354), (376, 420), (377, 354),
#       (377, 420), (378, 354), (378, 421), (379, 354), (379, 421),
#       (380, 354), (380, 422), (381, 354), (381, 422), (382, 354),
#       (382, 423), (383, 354), (383, 423), (384, 354), (384, 424),
#       (385, 354), (385, 424), (386, 354), (386, 424), (387, 354),
#       (387, 425), (388, 354), (388, 425), (389, 354), (389, 425),
#       (390, 354), (390, 425), (391, 355), (391, 426), (392, 355),
#       (392, 426), (393, 355), (393, 426), (394, 356), (394, 427),
#       (395, 356), (395, 427), (396, 356), (396, 427), (397, 356),
#       (397, 427), (398, 356), (398, 427), (399, 357), (399, 428),
#       (400, 357), (400, 428), (401, 358), (401, 428), (402, 358),
#       (402, 428), (403, 359), (403, 428), (404, 359), (404, 427),
#       (404, 429), (405, 359), (405, 427), (405, 429), (406, 360),
#       (406, 427), (406, 429), (407, 360), (407, 427), (407, 429),
#       (408, 360), (408, 428), (408, 429), (409, 360), (409, 428),
#       (410, 361), (410, 428), (411, 361), (411, 428), (412, 362),
#       (412, 428), (413, 362), (413, 428), (414, 362), (414, 428),
#       (415, 363), (415, 428), (416, 364), (416, 428), (417, 364),
#       (417, 428), (418, 365), (418, 428), (419, 365), (419, 427),
#       (420, 366), (420, 426), (421, 366), (421, 426), (422, 367),
#       (422, 426), (423, 368), (423, 426), (424, 368), (424, 426),
#       (425, 369), (425, 426), (426, 370), (426, 426), (427, 371),
#       (427, 426), (428, 372), (428, 426), (429, 373), (429, 426),
#       (430, 374), (430, 425), (431, 375), (431, 376), (431, 425),
#       (432, 377), (432, 424), (433, 378), (433, 424), (434, 379),
#       (434, 423), (435, 380), (435, 381), (435, 422), (436, 382),
#       (436, 421), (437, 383), (437, 384), (437, 421), (438, 385),
#       (438, 420), (439, 386), (439, 387), (439, 420), (440, 388),
#       (440, 389), (440, 390), (440, 418), (440, 419), (441, 391),
#       (441, 392), (441, 417), (442, 393), (442, 394), (442, 415),
#       (442, 416), (443, 395), (443, 396), (443, 397), (443, 398),
#       (443, 409), (443, 410), (443, 413), (443, 414), (444, 399),
#       (444, 400), (444, 401), (444, 402), (444, 403), (444, 404),
#       (444, 405), (444, 406), (444, 407), (444, 408), (444, 409),
#       (444, 410), (444, 411), (444, 412)])

#n =  ([(154, 407), (154, 408), (154, 409), (154, 410), (154, 411),
#       (154, 412), (154, 413), (154, 414), (155, 403), (155, 404),
#       (155, 405), (155, 406), (155, 415), (155, 416), (155, 417),
#       (155, 418), (156, 401), (156, 402), (156, 419), (156, 420),
#       (157, 394), (157, 395), (157, 396), (157, 397), (157, 398),
#       (157, 399), (157, 400), (157, 421), (157, 422), (157, 423),
#       (157, 424), (157, 425), (158, 393), (158, 426), (158, 427),
#       (158, 428), (159, 393), (159, 429), (160, 392), (160, 430),
#       (161, 391), (161, 430), (162, 388), (162, 389), (162, 390),
#       (162, 431), (163, 386), (163, 387), (163, 431), (164, 384),
#       (164, 385), (164, 432), (165, 382), (165, 383), (165, 433),
#       (166, 380), (166, 381), (166, 433), (167, 379), (167, 434),
#       (168, 434), (169, 434), (170, 435), (171, 435), (172, 435),
#       (173, 435), (174, 435), (175, 435), (176, 435), (177, 435),
#       (178, 435), (179, 435), (180, 435), (181, 435), (182, 435),
#       (183, 434), (184, 434), (185, 434), (186, 434)])

#n =  ([(226, 365), (226, 366), (227, 365), (228, 364), (228, 365),
#       (229, 364), (230, 363), (230, 364), (231, 363), (232, 361),
#       (232, 362), (232, 363), (233, 361), (234, 360), (234, 361),
#       (235, 359), (235, 360), (236, 358), (236, 359), (237, 356),
#       (237, 357), (237, 358), (238, 355), (238, 356), (239, 355),
#       (240, 354), (240, 355), (241, 353), (241, 354), (242, 352),
#       (242, 353), (243, 351), (243, 352), (244, 350), (244, 351),
#       (245, 350)])

#n =  ([(33, 18), (33, 19), (33, 20), (33, 21), (33, 22), (33, 23),
#       (33, 24), (33, 25), (34, 17), (34, 26), (34, 27), (35, 16),
#       (35, 28), (36, 15), (37, 14), (38, 13), (39, 12), (40, 11),
#       (41, 11), (42, 11), (43, 11), (44, 11), (45, 11), (46, 11),
#       (47, 11), (48, 11), (49, 11), (50, 12), (51, 13), (52, 13),
#       (53, 14), (54, 15), (55, 16), (55, 17), (55, 26), (55, 27),
#       (55, 28), (55, 29), (55, 30), (55, 31), (56, 18), (56, 19),
#       (56, 20), (56, 21), (56, 22), (56, 23), (56, 24), (56, 25),
#       (56, 32), (56, 33), (57, 34), (57, 35)])

import points_eucldist
import dist_betw2segs

def find_tips(n):
    h_img = []
    w_img = []
    for nt in range(len(n)):
        w_img.append(n[nt][0][0])
        h_img.append(n[nt][0][1])
    height = max(h_img)
    width = max(w_img)
    img = np.zeros((height+2,width+2),np.uint8)
    nnt = np.array(n)
    cv2.drawContours(img,[nnt],0,1,1)
    x,y,w,h = cv2.boundingRect(np.array(n))
    ROI = img[(y-1):(y+h+1),(x-1):(x+w+1)]
    tips = []
    
#    plt.imshow(img)
#    plt.show()
#    plt.imshow(ROI)
#    plt.show()  
       
    for j in range(1,h+1):
        for i in range(1,w+1):
                            
            if ROI[j,i] == 1:
                list1 = (ROI[j-1,i-1],ROI[j-1,i],ROI[j-1,i+1],ROI[j,i-1],ROI[j,i+1],ROI[j+1,i-1],ROI[j+1,i],ROI[j+1,i+1])
                list2 = ([j-1,i-1],[j-1,i],[j-1,i+1],[j,i-1],[j,i+1],[j+1,i-1],[j+1,i],[j+1,i+1])
                if list1.count(1) == 1:
    #                    tips.append([j,i])
                    tips.append([x-1+i,y-1+j])
                if list1.count(1) == 2:
                    k = []
                    for pnt in range(len(list1)):
                        if list1[pnt] ==1:
                            k.append(list2[pnt])
                    dist_mn = points_eucldist.eucldist(k[0],k[1])
                    if dist_mn == 1:
    #                        tips.append([j,i])
                        tips.append([x-1+i,y-1+j])
    if len(tips) != 2:
        to_del_pos = []
        for tip in range(len(tips)):
            for ttip in range(tip+1, len(tips)):
                tip_dist = dist_betw2segs.eucldist(tips[tip],tips[ttip])
                if tip_dist < 10:
                    to_del_pos.append(tip) 
                    break
        for to_del in sorted(to_del_pos,reverse = True):
            del tips[to_del]
    
    return tips

#plt.imshow(img)
#plt.show()